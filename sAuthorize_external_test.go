package packages

import (
	"testing"

	"gitlab.com/soteapps/packages/v2020/sAuthorize"
	"gitlab.com/soteapps/packages/v2020/sConfigParams"
	"gitlab.com/soteapps/packages/v2020/sError"
)

const (
	// Token
	TOKENEXPIRED    = "eyJraWQiOiJjbmhHanQwVXNqZFNHNzFvUWQ1cThTRjNTb29mOHBPNU1qTThMaDdNWDlrPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJkZDg5NmVhNi03NmI2LTQ1OGYtYWYyNC0zMTAyN2JiOGQzODMiLCJkZXZpY2Vfa2V5IjoiZXUtd2VzdC0xXzU1MDg3NThmLWM4NmMtNDYwYS05NjMyLTBiMzBjYjE0NzBhNSIsImV2ZW50X2lkIjoiYWFkNTdhMjMtZDRjMC00M2E2LWIyZGQtNzIzZjA3ZjkxNzk5IiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJhd3MuY29nbml0by5zaWduaW4udXNlci5hZG1pbiIsImF1dGhfdGltZSI6MTU5NTQ2MTE4NSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLmV1LXdlc3QtMS5hbWF6b25hd3MuY29tXC9ldS13ZXN0LTFfUVZQd3dDZzJjIiwiZXhwIjoxNTk1NDY0Nzg1LCJpYXQiOjE1OTU0NjExODUsImp0aSI6IjFiNTYyMWNlLTk5YzAtNDczOC05YjA0LTZkOTk0ODUxYTM2MiIsImNsaWVudF9pZCI6InR0c21yNjUzcXRma3VjZ2dvZnBtcWJic3AiLCJ1c2VybmFtZSI6ImRkODk2ZWE2LTc2YjYtNDU4Zi1hZjI0LTMxMDI3YmI4ZDM4MyJ9.Y2ypGn1cVPvjoOMxE5jbm7HwAWghN4zX2RJ8UxGwfwYLsHEPpGgJHpCqHJal1jufe-ciM_XQM7QvPFYFO5BL0wzDtHZmx0ntCP26Tt6lnwi7a_XflWlhb48CPE4WIk_1TcgKXVwquIhf437NvmsfXo_ctoSCJ4EGPYN4BUQCugYWmsMdh5aFzXVS3nz9DEHJVAh5IB7C3N9TTYOmplUVIoRLLfCyk16eMhO-I3zv2T3PKTiM01vUe_7zxaXqPLdG52GQ_U-wmJueMhYABWkKDJtVdWqYn7RS-dJckbEozbdalMqwyIe9ejMz8MlMthVTq6qaDMD8-n26WlIAA09VUw"
	TOKENINVALIDSIG = "eyJraWQiOiJjbmhHanQwVXNqZFNHNzFvUWQ1cThTRjNTb29mOHBPNU1qTThMaDdNWDlrPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJkZDg5NmVhNi03NmI2LTQ1OGYtYWYyNC0zMTAyN2JiOGQzODMiLCJkZXZpY2Vfa2V5IjoiZXUtd2VzdC0xXzU1MDg3NThmLWM4NmMtNDYwYS05NjMyLTBiMzBjYjE0NzBhNSIsImV2ZW50X2lkIjoiYWFkNTdhMjMtZDRjMC00M2E2LWIyZGQtNzIzZjA3ZjkxNzk5IiwiDG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJhd3MuY29nbml0by5zaWduaW4udXNlci5hZG1pbiIsImF1dGhfdGltZSI6MTU5NTQ2MTE4NSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLmV1LXdlc3QtMS5hbWF6b25hd3MuY29tXC9ldS13ZXN0LTFfUVZQd3dDZzJjIiwiZXhwIjoxNTk1NDY0Nzg1LCJpYXQiOjE1OTU0NjExODUsImp0aSI6IjFiNTYyMWNlLTk5YzAtNDczOC05YjA0LTZkOTk0ODUxYTM2MiIsImNsaWVudF9pZCI6InR0c21yNjUzcXRma3VjZ2dvZnBtcWJic3AiLCJ1c2VybmFtZSI6ImRkODk2ZWE2LTc2YjYtNDU4Zi1hZjI0LTMxMDI3YmI4ZDM4MyJ9.Y2ypGn1cVPvjoOMxE5jbm7HwAWghN4zX2RJ8UxGwfwYLsHEPpGgJHpCqHJal1jufe-ciM_XQM7QvPFYFO5BL0wzDtHZmx0ntCP26Tt6lnwi7a_XflWlhb48CPE4WIk_1TcgKXVwquIhf437NvmsfXo_ctoSCJ4EGPYN4BUQCugYWmsMdh5aFzXVS3nz9DEHJVAh5IB7C3N9TTYOmplUVIoRLLfCyk16eMhO-I3zv2T3PKTiM01vUe_7zxaXqPLdG52GQ_U-wmJueMhYABWkKDJtVdWqYn7RS-dJckbEozbdalMqwyIe9ejMz8MlMthVTq6qaDMD8-n26WlIAA09VUw"
	TOKENINVALID    = "eyJraWQiOiJlOCt4TW4rOGYrZmlIXC9OZDNDZGNxOVRvU3FPKzdZYldcL1wvSUxCYVJyTElNPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI1ZDUxNDdlMi01N2ZjLTQ4YTYtYjQ5My0xNzgzOTMxYWU5YzAiLCJkZXZpY2Vfa2V5IjoiZXUtd2VzdC0xX2IyODdkMTQ0LTJhNjEtNDAzZC04MmNjLTkyYWY3ZmZhYmZjNiIsImV2ZW50X2lkIjoiZjFhNTYwMzItYjYyZi00OWFhLWI0MmEtMmI3YzIwZmVhY2VkIiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJhd3MuY29nbml0by5zaWduaW4udXNlci5hZG1pbiIsImF1dGhfdGltZSI6MTU5NTQ2MTQyMSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLmV1LXdlc3QtMS5hbWF6b25hd3MuY29tXC9ldS13ZXN0LTFfZnBaQ3lxbFFOIiwiZXhwIjoxNTk1NDY1MDIxLCJpYXQiOjE1OTU0NjE0MjEsImp0aSI6ImU5ODNkNDJjLWM4YWUtNDZmNi05MmFlLTE1YzczMGEwODRhZCIsImNsaWVudF9pZCI6IjQ5ZzUwOGgwanIyczJ0bmJpM2toZ3Rkc3AyIiwidXNlcm5hbWUiOiI1ZDUxNDdlMi01N2ZjLTQ4YTYtYjQ5My0xNzgzOTMxYWU5YzAifQ.T6IOtBsU0QLzOplbEWqa1QRAS7nMTknWP-meYaE4WQybLzFr-9-dPGMA3spFoQfgjD40Mxl5CFtkVmDSn1W8Yo3wvVATt7t1220YV2WAIQLf4SKghS-dwans10BpAnC5BwLgEE_sDPaJ064mV56xbOO9R-ePmNws-_qYp_R615RtHwJPtQedVwFRH7W63wS6ATs0wBaQ6McIAu1QSyoOj6ePegSzhJd_bhrDD4i42GqC2rb0rca_IRYxd3Ev44Rjx9QGZHni-BYw04jBKSFuYUvtoIpPl9gD4PzxSU5d_4lRX264uBY9F8cgeVmV97JvzVSdoAqaxfpj_drX0789Sg"
	// Application
	SDCC = "sdcc"
)

func TestValidToken(t *testing.T) {
	var soteErr sError.SoteError
	if soteErr = sAuthorize.ValidToken(SDCC, sConfigParams.DEVELOPMENT, TOKENEXPIRED); soteErr.ErrCode != 500050 && soteErr.ErrCode != nil {
		t.Errorf("ValidToken failed: Expected soteErr to be 500050 or nil: %v", soteErr.ErrCode)
	}
}
func TestInValidSignatureToken(t *testing.T) {
	var soteErr sError.SoteError
	if soteErr = sAuthorize.ValidToken(SDCC, sConfigParams.DEVELOPMENT, TOKENINVALIDSIG); soteErr.ErrCode != 500050 && soteErr.ErrCode != 500055 {
		t.Errorf("ValidToken failed: Expected soteErr to be 500050 or 500055: %v", soteErr.ErrCode)
	}
}
func TestInValidToken(t *testing.T) {
	var soteErr sError.SoteError
	if soteErr = sAuthorize.ValidToken(SDCC, sConfigParams.DEVELOPMENT, TOKENINVALID); soteErr.ErrCode != 500055 {
		t.Errorf("ValidToken failed: Expected soteErr to be 500055: %v", soteErr.ErrCode)
	}
}
